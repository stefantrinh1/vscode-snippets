{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "unitTest": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": "defaultprops",
    "body": [
      "import myFunc from '../myFunc';",

      "it('should return the correct status code', () => {",
      "testData.forEach(({ string, result }) => {",
      "expect(myFunc(string)).toBe(result);",
      "});",
      "});",

      "const testData = [",
      "{",
      "data: 'Status 400 Error Code',",
      "result: 400,",
      "},",
      "{",
      "data: 'Status Error Code 401',",
      "result: 401,",
      "},",
      "];"
    ],
    "description": "Create Unit test"
  },
  "jestMatchers": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": "jestMatchers",
    "body": [
      "const z = 0;",
      "expect(z).not.toBeNull();",
      "expect(z).toBeDefined();",
      "expect(z).not.toBeUndefined();",
      "expect(z).not.toBeTruthy();",
      "expect(z).toBeFalsy();",
      "// ======",
      "const value = 2 + 2;",
      "expect(value).toBeGreaterThan(3);",
      "expect(value).toBeGreaterThanOrEqual(3.5);",
      "expect(value).toBeLessThan(5);",
      "expect(value).toBeLessThanOrEqual(4.5);",
      "expect(value).toBe(4);",
      "expect(value).toEqual(4);",
      "expect('team').not.toMatch(/I/);// regular expressions",
      "expect(['a','b']).toContain('milk');",
      "expect(new Set(['a','b'])).toContain('milk');",
      "expect(() => compileAndroidCode()).toThrow();",
      "expect(() => compileAndroidCode()).toThrow(Error);",
      "expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');",
      "expect(() => compileAndroidCode()).toThrow(/JDK/);"
    ],
    "description": "get a list of jest matchers for tesing"
  },
  "reactTestingFile": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": "reactTestingFile",
    "body": [
      "import {render} from '@testing-library/react'",
      "import '@testing-library/jest-dom'",

      "test('renders a message', () => {",
      "     const {container, getByText} = render(<Greeting />)",
      "     expect(getByText('Hello, world!')).toBeInTheDocument()",
      "     expect(container.firstChild).toMatchInlineSnapshot(`",
      "     <h1>Hello, World!</h1>",
      " `)",
      "})"
    ],
    "description": "reactTestingFile"
  },
  "reactTestingQueries": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": "reactTestingQueries",
    "body": [
      "screen.getByLabelText()",
      "screen.queryByLabelText()",
      "screen.getAllByLabelText()",
      "screen.queryAllByLabelText()",
      "screen.findByLabelText()",
      "screen.findAllByLabelText()",
      "screen.getByPlaceholderText()",
      "screen.queryByPlaceholderText()",
      "screen.getAllByPlaceholderText()",
      "screen.queryAllByPlaceholderText()",
      "screen.findByPlaceholderText()",
      "screen.findAllByPlaceholderText()",
      "screen.getByText()",
      "screen.queryByText()",
      "screen.getAllByText()",
      "screen.queryAllByText()",
      "screen.findByText()",
      "screen.findAllByText()",
      "screen.getByDisplayValue()",
      "screen.queryByDisplayValue()",
      "screen.getAllByDisplayValue()",
      "screen.queryAllByDisplayValue()",
      "screen.findByDisplayValue()",
      "screen.findAllByDisplayValue()",
      "screen.getByAltText()",
      "screen.queryByAltText()",
      "screen.getAllByAltText()",
      "screen.queryAllByAltText()",
      "screen.findByAltText()",
      "screen.findAllByAltText()",
      "screen.getByTitle()",
      "screen.queryByTitle()",
      "screen.getAllByTitle()",
      "screen.queryAllByTitle()",
      "screen.findByTitle()",
      "screen.findAllByTitle()",
      "screen.getByRole()",
      "screen.queryByRole()",
      "screen.getAllByRole()",
      "screen.queryAllByRole()",
      "screen.findByRole()",
      "screen.findAllByRole()",
      "screen.getByTestId()",
      "screen.queryByTestId()",
      "screen.getAllByTestId()",
      "screen.queryAllByTestId()",
      "screen.findByTestId()",
      "screen.findAllByTestId()"
    ],
    "description": "react Testing Queries"
  },
  "reactTestingUserEventsExamples": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": "reactTestingQueries",
    "body": [
      "userEvent.click(screen.getByText('Check'))",
      "userEvent.click(element);",
      "userEvent.type(input, 'hello world!')",
      "userEvent.keyboard('{Shift}{f}{o}{o}')",
      "userEvent.clear(screen.getByRole('textbox'))",
      "userEvent.selectOptions(screen.getByRole('listbox'), ['1', '3'])",
      "userEvent.tab()",
      "expect(number).toHaveFocus()"
    ],
    "description": "react Testing Queries"
  },
  "reactTestingExpectExamples": {
    "scope": "javascript, typescript, javascriptreact, typescriptreact",
    "prefix": "reactTestingQueries",
    "body": [
      "expect(screen.getByLabelText('Check')).toBeChecked()",
      "expect(screen.getByRole('option', {name: 'A'}).selected).toBe(true)",
      "expect(screen.getByText('B').selected).toBe(false)",
      "expect(checkbox).toHaveFocus()",
      "expect(onChange).toHaveBeenCalledTimes(2)",
      "expect(screen.getByRole('textbox')).toHaveValue('Hello,\nWorld!')",
      "expect(screen.getByText(messageText)).toBeInTheDocument()",
      "userEvent.hover(screen.getByLabelText(/delete/i))",
      "expect(screen.getByText(messageText)).toBeInTheDocument()",
      "userEvent.unhover(screen.getByLabelText(/delete/i))",
      "expect(screen.queryByText(messageText)).not.toBeInTheDocument()"
    ],
    "description": "react Testing Queries"
  }
}
